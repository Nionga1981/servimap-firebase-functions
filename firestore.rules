
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // === FUNCIONES HELPER ===
    
    // Verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar si es el dueño del documento
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Verificar si es admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Verificar si el usuario existe como usuario o prestador
    function userExists(userId) {
      return exists(/databases/$(database)/documents/usuarios/$(userId)) ||
             exists(/databases/$(database)/documents/prestadores/$(userId));
    }
    
    // Helper functions legacy para compatibilidad
    function isCliente(docData) {
      return isAuthenticated() && request.auth.uid == docData.clienteUid;
    }

    function isPrestador(docData) {
      return isAuthenticated() && request.auth.uid == docData.prestadorUid;
    }

    // Helper function to check if only allowed keys were changed during an update.
    function changedKeysOnly(dataAfter, dataBefore, allowedToChange) {
      let changedKeys = dataAfter.diff(dataBefore).affectedKeys();
      return changedKeys.hasOnly(allowedToChange);
    }

    // Rules for the 'citas' collection
    // Assumed Firestore document fields for a Cita:
    // - clienteUid (string)
    // - prestadorUid (string)
    // - servicioId (string)
    // - fechaHoraCita (timestamp) - Combined date and time of the appointment
    // - ubicacion (string)
    // - mensaje (string, optional)
    // - estado (string: "pendiente", "confirmada", "rechazada", "cancelada_usuario", etc.)
    // - timestampCreacion (timestamp)
    // - timestampConfirmacion (timestamp, nullable) - When provider confirms
    // - fechaRechazo (timestamp, nullable) - When provider rejects
    // - paymentStatus (string, nullable) - e.g., "no_aplica", "pendiente_cobro"
    // - ordenCobroId (string, nullable)
    // - updatedAt (timestamp, nullable) - For tracking last update

    match /citas/{citaId} {
      // READ: Cliente or Prestador can read their own cita.
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.clienteUid || request.auth.uid == resource.data.prestadorUid);

      // CREATE: Only the authenticated user who is the clienteUid can create a cita.
      // The initial state must be "pendiente" and confirm/reject timestamps must be null.
      allow create: if isCliente(request.resource.data) &&
                       request.resource.data.estado == "pendiente" &&
                       request.resource.data.timestampCreacion == request.time &&
                       request.resource.data.updatedAt == request.time && // Good practice to set on create
                       request.resource.data.timestampConfirmacion == null &&
                       request.resource.data.fechaRechazo == null &&
                       // Initial payment state, assuming Cloud Functions will handle payment processing logic
                       request.resource.data.paymentStatus == "no_aplica" &&
                       request.resource.data.ordenCobroId == null &&
                       // Required fields that the client must provide
                       request.resource.data.prestadorUid is string &&
                       request.resource.data.servicioId is string && // Or other identifier for the service
                       request.resource.data.fechaHoraCita is timestamp &&
                       request.resource.data.ubicacion is string &&
                       // Optional 'mensaje' field
                       (!('mensaje' in request.resource.data) || request.resource.data.mensaje is string) &&
                       // Ensure no other unexpected fields are set by the client on create
                       request.resource.data.keys().hasOnly([
                         'clienteUid', 'prestadorUid', 'servicioId', 'fechaHoraCita', 'ubicacion',
                         'mensaje', 'estado', 'timestampCreacion', 'updatedAt',
                         'timestampConfirmacion', 'fechaRechazo', 'paymentStatus', 'ordenCobroId'
                         // Other fields like serviceType, precioServicio from types are not included
                         // here as per the simplified field list for rules.
                         // These would be set by the 'agendarCitaConPrestador' Cloud Function.
                       ]);

      // UPDATE:
      // Provider can confirm or reject a 'pendiente' cita.
      // Client can cancel their own 'pendiente' or 'confirmada' cita (example, not fully implemented here).
      allow update: if isAuthenticated() &&
                       // Provider actions (confirm/reject)
                       (
                         isPrestador(resource.data) &&
                         resource.data.estado == "pendiente" && // Action only on "pendiente" citas
                         request.resource.data.updatedAt == request.time && // Update operations must set updatedAt
                         // Ensure core immutable fields are not changed by the provider
                         request.resource.data.clienteUid == resource.data.clienteUid &&
                         request.resource.data.prestadorUid == resource.data.prestadorUid &&
                         request.resource.data.servicioId == resource.data.servicioId &&
                         request.resource.data.fechaHoraCita == resource.data.fechaHoraCita &&
                         request.resource.data.ubicacion == resource.data.ubicacion &&
                         request.resource.data.mensaje == resource.data.mensaje && // Provider doesn't change client's initial message here
                         request.resource.data.timestampCreacion == resource.data.timestampCreacion &&
                         (
                           // Scenario 1: Provider confirms the cita
                           (
                             request.resource.data.estado == "confirmada" &&
                             request.resource.data.timestampConfirmacion == request.time &&
                             request.resource.data.paymentStatus == "pendiente_cobro" && // To be set by the CF
                             request.resource.data.ordenCobroId is string &&           // To be set by the CF
                             // Ensure only these specific fields are being modified from their original values by this operation
                             changedKeysOnly(request.resource.data, resource.data,
                               ['estado', 'timestampConfirmacion', 'paymentStatus', 'ordenCobroId', 'updatedAt']
                             )
                           ) ||
                           // Scenario 2: Provider rejects the cita
                           (
                             request.resource.data.estado == "rechazada" &&
                             request.resource.data.fechaRechazo == request.time && // To be set by the CF
                             request.resource.data.timestampConfirmacion == resource.data.timestampConfirmacion && // Should remain null
                             request.resource.data.paymentStatus == resource.data.paymentStatus && // Should remain "no_aplica"
                             request.resource.data.ordenCobroId == resource.data.ordenCobroId &&     // Should remain null
                             changedKeysOnly(request.resource.data, resource.data,
                               ['estado', 'fechaRechazo', 'updatedAt']
                             )
                           )
                         )
                       );
                       // Example for client cancelling (not fully detailed as per primary request but shows structure):
                       // ||
                       // (
                       //   isCliente(resource.data) &&
                       //   (resource.data.estado == "pendiente" || resource.data.estado == "confirmada") &&
                       //   request.resource.data.estado == "cancelada_usuario" &&
                       //   request.resource.data.updatedAt == request.time &&
                       //   // ... other checks for client cancellation ...
                       // )


      // DELETE: No client-side deletion allowed.
      allow delete: if false;
    }

    // === COLECCIONES PRINCIPALES ===
    
    // Usuarios - Lectura propia y de admins, escritura propia limitada
    match /usuarios/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
                      // No pueden modificar campos críticos
                      !('referidoPor' in request.resource.data.diff(resource.data).changedKeys()) &&
                      !('membershipLevel' in request.resource.data.diff(resource.data).changedKeys());
      allow create: if isAuthenticated();
    }
    
    // Prestadores - Similar a usuarios
    match /prestadores/{providerId} {
      allow read: if isOwner(providerId) || isAdmin();
      allow write: if isOwner(providerId) &&
                      !('referidoPor' in request.resource.data.diff(resource.data).changedKeys()) &&
                      !('rating' in request.resource.data.diff(resource.data).changedKeys());
      allow create: if isAuthenticated();
    }
    
    // === SISTEMA DE WALLET ===
    
    // Wallets - Solo lectura propia, escritura solo por Cloud Functions
    match /wallets/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false; // Solo Cloud Functions pueden modificar
    }
    
    // Transacciones de Wallet - Solo lectura propia, escritura solo por CF
    match /wallet_transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // === SISTEMA DE COMISIONES ===
    
    // Comisiones Unificadas - Lectura para embajadores, escritura solo por CF
    match /commissions/{commissionId} {
      allow read: if isOwner(resource.data.ambassadorId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // Bonos de Lealtad - Solo lectura propia y escritura por CF
    match /loyalty_bonuses/{bonusId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // Retiros - Lectura propia, escritura solo por CF
    match /withdrawals/{withdrawalId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // === SERVICIOS Y COTIZACIONES ===
    
    // Solicitudes de Servicio - Lectura para involucrados
    match /service_requests/{serviceId} {
      allow read: if isOwner(resource.data.usuarioId) || 
                     isOwner(resource.data.prestadorId) || 
                     isAdmin();
      allow write: if (isOwner(resource.data.usuarioId) || 
                      isOwner(resource.data.prestadorId)) &&
                      // Campos que solo pueden ser modificados por CF
                      !('comisionesCalculadas' in request.resource.data.diff(resource.data).changedKeys()) &&
                      !('detallesFinancieros' in request.resource.data.diff(resource.data).changedKeys()) &&
                      !('paymentStatus' in request.resource.data.diff(resource.data).changedKeys());
    }
    
    // Cotizaciones - Lectura para involucrados
    match /solicitudes_cotizacion/{quotationId} {
      allow read: if isOwner(resource.data.usuarioId) || 
                     isOwner(resource.data.prestadorId) || 
                     isAdmin();
      allow write: if isOwner(resource.data.usuarioId) || 
                      isOwner(resource.data.prestadorId);
    }
    
    // === LOGS Y AUDITORÍA ===
    
    // Activity Logs - Solo lectura para admins
    match /activity_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // === CONFIGURACIÓN Y METADATA ===
    
    // Administradores - Solo lectura para verificación de permisos
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if false; // Solo configuración manual
    }
    
    // Categorías - Lectura pública
    match /categorias/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Promociones de Fidelidad - Lectura pública, escritura admin
    match /promociones_fidelidad/{promoId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Fondo de Fidelidad - Solo lectura admin
    match /fondoFidelidad/{fundId} {
      allow read: if isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // === NOTIFICACIONES Y RECORDATORIOS ===
    
    // Recordatorios - Solo lectura propia
    match /recordatorios/{recordatorioId} {
      allow read: if isOwner(resource.data.usuarioId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // === SUBCOLECCIONES ===
    
    // Historial de puntos de usuario
    match /usuarios/{userId}/historial_puntos/{entryId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
    }
    
    // FCM Tokens (subcolección)
    match /usuarios/{userId}/fcm_tokens/{tokenId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    match /prestadores/{providerId}/fcm_tokens/{tokenId} {
      allow read: if isOwner(providerId);
      allow write: if isOwner(providerId);
    }
    
    // === REGLAS POR DEFECTO ===
    
    // Denegar todo lo que no esté explícitamente permitido
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    