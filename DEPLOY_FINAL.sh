#!/bin/bash

# üöÄ SCRIPT DE DEPLOYMENT FINAL - SERVIMAP CON FUNCIONALIDAD DE LOGOS
# Ejecutar despu√©s de autenticarse: bash DEPLOY_FINAL.sh

echo "üöÄ Iniciando deployment completo de ServiMap..."

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar status
show_status() {
    echo -e "${BLUE}üìã $1${NC}"
}

show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar autenticaci√≥n
show_status "Verificando autenticaci√≥n Firebase..."
if ! firebase projects:list &> /dev/null; then
    show_error "No est√°s autenticado en Firebase."
    echo "üëâ Ejecuta: firebase login"
    echo "üëâ O genera un token: firebase login:ci"
    exit 1
fi

show_success "Autenticaci√≥n verificada"

# Verificar proyecto
show_status "Verificando proyecto Firebase..."
if ! firebase use servimap-nyniz &> /dev/null; then
    show_error "No se pudo seleccionar el proyecto servimap-nyniz"
    echo "üëâ Verifica que tienes acceso al proyecto"
    exit 1
fi

show_success "Proyecto servimap-nyniz seleccionado"

# 1. Compilar Cloud Functions
show_status "Compilando Cloud Functions..."
cd functions

if npm run build; then
    show_success "Cloud Functions compiladas exitosamente"
    cd ..
else
    show_error "Error compilando Cloud Functions"
    exit 1
fi

# 2. Deploy Storage Rules (PRIMERA PRIORIDAD)
show_status "Deployando Storage Rules..."
if firebase deploy --only storage; then
    show_success "Storage Rules deployadas exitosamente"
    echo "  ‚úì Reglas de logos configuradas"
    echo "  ‚úì Acceso p√∫blico a logos habilitado"
else
    show_error "Error deployando Storage Rules"
    exit 1
fi

# 3. Deploy Cloud Functions
show_status "Deployando Cloud Functions..."
if firebase deploy --only functions; then
    show_success "Cloud Functions deployadas exitosamente"
    echo "  ‚úì Funciones de logos: updateProviderLogo, updateBusinessLogo"
    echo "  ‚úì Funciones de chat restauradas"
    echo "  ‚úì Funciones de comunidad activas"
    echo "  ‚úì Funciones premium b√°sicas activas"
else
    show_warning "Error deployando Cloud Functions"
    echo "üìù Continuando con Frontend..."
fi

# 4. Deploy Frontend/Hosting
show_status "Deployando Frontend (Hosting)..."
if firebase deploy --only hosting; then
    show_success "Frontend deployado exitosamente"
    echo "  ‚úì Componente LogoUpload.tsx deployado"
    echo "  ‚úì Formularios con campos de logo"
    echo "  ‚úì Mapa con logos personalizados"
else
    show_error "Error deployando Frontend"
    show_warning "Storage Rules y Cloud Functions est√°n deployadas"
fi

echo ""
echo "üéâ ¬°DEPLOYMENT COMPLETADO!"
echo ""
echo "üìã Resumen del deployment:"
echo "‚úÖ Storage Rules - Logos p√∫blicos configurados"
echo "‚úÖ Cloud Functions - Funciones principales + logos"
echo "‚úÖ Frontend - UI con funcionalidad de logos"
echo ""
echo "üß™ Pr√≥ximos pasos para probar:"
echo "1. Ir a formulario de registro de prestador"
echo "2. Subir un logo en el campo correspondiente"
echo "3. Completar registro"
echo "4. Verificar que aparece en el mapa con logo personalizado"
echo ""
echo "üîó URLs √∫tiles:"
echo "- Firebase Console: https://console.firebase.google.com/project/servimap-nyniz"
echo "- Functions Logs: firebase functions:log"
echo ""
echo "‚ú® ¬°LA FUNCIONALIDAD DE LOGOS EST√Å LISTA EN PRODUCCI√ìN! ‚ú®"