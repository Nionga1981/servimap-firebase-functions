rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // === FUNCIÓN HELPER ===
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.exists(/databases/(default)/documents/admins/$(request.auth.uid));
    }
    
    function isPrestadorVerificado(userId) {
      return firestore.exists(/databases/(default)/documents/prestadores/$(userId)) &&
        firestore.get(/databases/(default)/documents/prestadores/$(userId)).data.get('verificacionIdentidad', {}).get('estado', '') == 'verificado';
    }
    
    // === ARCHIVOS PÚBLICOS ===
    
    // Fotos de portafolio de prestadores - públicas pero con validación
    match /{userId}/portafolio/{fileName} {
      // Lectura pública para todos los usuarios autenticados
      allow read: if isAuthenticated();
      
      // Escritura solo por el dueño, con validación de tamaño y tipo
      allow write: if isOwner(userId) && 
        request.resource.size <= 5 * 1024 * 1024 && // 5MB máximo
        request.resource.contentType.matches('image/.*');
      
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Videos de presentación de prestadores
    match /{userId}/videos/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isOwner(userId) && 
        request.resource.size <= 50 * 1024 * 1024 && // 50MB máximo
        request.resource.contentType.matches('video/.*');
      
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Documentos públicos de prestadores (certificados, diplomas)
    match /{userId}/documentos/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isOwner(userId) && 
        request.resource.size <= 10 * 1024 * 1024 && // 10MB máximo
        (request.resource.contentType.matches('application/pdf') ||
         request.resource.contentType.matches('image/.*'));
      
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // === ARCHIVOS PRIVADOS Y SEGUROS ===
    
    // Documentos de identidad - ALTAMENTE RESTRINGIDOS
    match /secure/{userId}/documentos_identidad/{fileName} {
      // Solo el sistema (Cloud Functions) y administradores pueden leer
      allow read: if isAdmin();
      
      // Solo el dueño puede subir, pero debe ser validado por IA
      allow write: if isOwner(userId) && 
        request.resource.size <= 10 * 1024 * 1024 && // 10MB máximo
        request.resource.contentType.matches('image/.*');
      
      // Solo admin puede eliminar (para cumplimiento legal)
      allow delete: if isAdmin();
    }
    
    // Documentos de verificación financiera (para prestadores premium)
    match /secure/{userId}/documentos_financieros/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      
      allow write: if isOwner(userId) && 
        isPrestadorVerificado(userId) &&
        request.resource.size <= 10 * 1024 * 1024 &&
        (request.resource.contentType.matches('application/pdf') ||
         request.resource.contentType.matches('image/.*'));
      
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // === ARCHIVOS DE SERVICIOS ===
    
    // Imágenes relacionadas con servicios específicos
    match /servicios/{serviceId}/{fileName} {
      // Lectura: participantes del servicio
      allow read: if isAuthenticated() && (
        firestore.get(/databases/(default)/documents/servicios/$(serviceId)).data.clienteId == request.auth.uid ||
        firestore.get(/databases/(default)/documents/servicios/$(serviceId)).data.prestadorId == request.auth.uid ||
        isAdmin()
      );
      
      // Escritura: participantes del servicio
      allow write: if isAuthenticated() && 
        request.resource.size <= 10 * 1024 * 1024 &&
        (firestore.get(/databases/(default)/documents/servicios/$(serviceId)).data.clienteId == request.auth.uid ||
         firestore.get(/databases/(default)/documents/servicios/$(serviceId)).data.prestadorId == request.auth.uid) &&
        (request.resource.contentType.matches('image/.*') ||
         request.resource.contentType.matches('application/pdf'));
      
      allow delete: if isAuthenticated() && (
        firestore.get(/databases/(default)/documents/servicios/$(serviceId)).data.clienteId == request.auth.uid ||
        firestore.get(/databases/(default)/documents/servicios/$(serviceId)).data.prestadorId == request.auth.uid ||
        isAdmin()
      );
    }
    
    // === ARCHIVOS DE MODERACIÓN ===
    
    // Archivos en cuarentena por moderación IA
    match /moderacion/{fileName} {
      // Solo administradores pueden acceder
      allow read, write, delete: if isAdmin();
    }
    
    // === ARCHIVOS TEMPORALES ===
    
    // Archivos temporales (se eliminan automáticamente)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && 
        request.resource.size <= 50 * 1024 * 1024; // 50MB máximo
      
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // === RESPALDOS Y EXPORTACIONES ===
    
    // Respaldos de datos de usuario (GDPR compliance)
    match /exports/{userId}/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false; // Solo Cloud Functions
      allow delete: if isAdmin();
    }
    
    // === REGLA POR DEFECTO ===
    
    // Denegar todo lo que no esté explícitamente permitido
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
